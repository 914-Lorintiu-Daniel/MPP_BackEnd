"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var import_single_exports = {};
__export(import_single_exports, {
  importSingleTs: () => importSingleTs
});
module.exports = __toCommonJS(import_single_exports);
var fs = __toESM(require("node:fs"));
var import_node_module = require("node:module");
var path = __toESM(require("node:path"));
var import_node_url = require("node:url");
var import_node_util = require("node:util");
var import_enhanced_resolve = __toESM(require("enhanced-resolve"));
var import_esbuild = require("esbuild");
const { CachedInputFileSystem, create: createResolverFn } = import_enhanced_resolve.default;
const fsp = fs.promises;
const BUILTIN_MODULES_SET = new Set(import_node_module.builtinModules);
const NODEJS_SUPPORTED_FILE_EXTENSIONS = [
  "js",
  "mjs",
  "cjs",
  "node",
  "json"
].map((ext) => `.${ext}`);
const importSingleTs = async (requestedImportPath, resolutionOptions) => {
  const finalResolutionOptions = {
    fileSystem: new CachedInputFileSystem(fs, 4e3),
    extensions: NODEJS_SUPPORTED_FILE_EXTENSIONS,
    ...(resolutionOptions == null ? void 0 : resolutionOptions.mainFields) && {
      mainFields: resolutionOptions.mainFields
    },
    ...(resolutionOptions == null ? void 0 : resolutionOptions.alias) && { alias: resolutionOptions.alias },
    conditionNames: [
      ...(resolutionOptions == null ? void 0 : resolutionOptions.conditions) || [],
      "import",
      "node",
      "default"
    ]
  };
  const resolveMain = createResolverFn(finalResolutionOptions);
  const resolveWithCJS = createResolverFn({
    ...finalResolutionOptions,
    conditionNames: [...finalResolutionOptions.conditionNames, "require"]
  });
  const promisifiedResolveMain = (0, import_node_util.promisify)(resolveMain);
  const promisifiedResolveWithCJS = (0, import_node_util.promisify)(resolveWithCJS);
  const promisifiedResolve = async (requesterDir, requestedFilePath) => {
    try {
      return await promisifiedResolveMain(requesterDir, requestedFilePath);
    } catch (err) {
      return await promisifiedResolveWithCJS(requesterDir, requestedFilePath);
    }
  };
  const resolvedImportPath = path.isAbsolute(requestedImportPath) ? requestedImportPath : await promisifiedResolve(getCallerDirPath(), requestedImportPath);
  if (!resolvedImportPath) {
    throw new Error(`Could not resolve: "${resolvedImportPath}"`);
  }
  const fileNameTemp = `${resolvedImportPath}.timestamp-${Date.now()}-${Math.random().toString(16).slice(2)}.mjs`;
  await (0, import_esbuild.build)({
    absWorkingDir: path.dirname(resolvedImportPath),
    entryPoints: [resolvedImportPath],
    outfile: fileNameTemp,
    target: [`node${process.versions.node}`],
    platform: "node",
    bundle: true,
    format: "esm",
    ...resolutionOptions,
    plugins: [
      {
        name: "externalize-runnable-js",
        setup: function externalizeRunnableJs({ onResolve }) {
          onResolve({ filter: /.+/ }, async (args) => {
            const requestedInnerImportPath = args.path;
            if (requestedInnerImportPath.startsWith("data:") || args.kind === "entry-point") {
              return null;
            }
            if (BUILTIN_MODULES_SET.has(requestedInnerImportPath) || requestedInnerImportPath.startsWith("node:")) {
              return { external: true };
            }
            try {
              const resolvedInnerImportPath = await promisifiedResolve(
                args.resolveDir,
                requestedInnerImportPath
              );
              const isRunnableByNode = resolvedInnerImportPath && await fsp.stat(resolvedInnerImportPath).catch(() => false) && NODEJS_SUPPORTED_FILE_EXTENSIONS.some(
                (ext) => resolvedInnerImportPath.endsWith(ext)
              );
              return isRunnableByNode ? { external: true, path: resolvedInnerImportPath } : null;
            } catch (e) {
              return null;
            }
          });
        }
      }
    ]
  });
  try {
    return await import(fileNameTemp);
  } finally {
    fsp.unlink(fileNameTemp).catch(() => {
    });
  }
};
const getCallerDirPath = () => {
  const originalPrepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = (_, stack2) => stack2;
  const { stack } = new Error();
  Error.prepareStackTrace = originalPrepareStackTrace;
  const currentFilePath = stack.shift().getFileName();
  while (stack.length) {
    const callFilePath = stack.shift().getFileName();
    if (callFilePath && callFilePath !== currentFilePath) {
      return callFilePath.startsWith("REPL") ? process.cwd() : path.dirname((0, import_node_url.fileURLToPath)(callFilePath));
    }
  }
  throw new Error(
    "Could not identify the directory where importTs(...) was called from"
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  importSingleTs
});
